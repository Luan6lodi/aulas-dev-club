/*

ğŸ”¹ LÃ³gica de ProgramaÃ§Ã£o

Ã‰ o jeito de pensar para resolver problemas usando passos organizados.
ğŸ‘‰ NÃ£o Ã© sÃ³ escrever cÃ³digo, mas pensar como um computador: de forma sequencial, lÃ³gica e sem ambiguidades.

Exemplo do dia a dia:
ğŸ“Œ Problema: Fazer um cafÃ©.
ğŸ“Œ Passos lÃ³gicos (algoritmo):

Esquentar a Ã¡gua

Colocar o pÃ³ de cafÃ© no filtro

Despejar a Ã¡gua quente no filtro

Esperar coar

Servir o cafÃ© na xÃ­cara

Isso Ã© um algoritmo (sequÃªncia de passos).

ğŸ”¹ O que Ã© Algoritmo?

Ã‰ um conjunto de instruÃ§Ãµes lÃ³gicas e ordenadas para resolver um problema.
Em programaÃ§Ã£o, o algoritmo vira cÃ³digo.

ğŸ”¹ Estruturas bÃ¡sicas da lÃ³gica de programaÃ§Ã£o
1. SequÃªncia

Executar instruÃ§Ãµes na ordem em que aparecem.

let nome = "Luan";
let idade = 20;
console.log("Nome: " + nome);
console.log("Idade: " + idade);

2. DecisÃ£o (condiÃ§Ã£o)

Fazer escolhas de acordo com uma situaÃ§Ã£o.

let idade = 18;

if (idade >= 18) {
  console.log("VocÃª Ã© maior de idade!");
} else {
  console.log("VocÃª Ã© menor de idade!");
}

3. RepetiÃ§Ã£o (laÃ§os)

Repetir um bloco de cÃ³digo vÃ¡rias vezes.

for (let i = 1; i <= 5; i++) {
  console.log("Contando: " + i);
}

4. Entrada e SaÃ­da

Entrada: dados que o usuÃ¡rio fornece.

SaÃ­da: resposta que o programa mostra.

Exemplo (em JS usando prompt e alert):

let nome = prompt("Qual seu nome?");
alert("Bem-vindo, " + nome + "!");

ğŸ”¹ Pensamento AlgorÃ­tmico

Sempre pense:

Qual Ã© o problema?

Quais dados eu preciso? (entrada)

O que devo fazer com esses dados? (processamento)

Qual resultado eu quero mostrar? (saÃ­da)

âœ… Resumindo:

LÃ³gica de programaÃ§Ã£o = forma de pensar para resolver problemas.

Algoritmo = passos ordenados para chegar na soluÃ§Ã£o.

Em programaÃ§Ã£o, usamos sequÃªncia, decisÃ£o e repetiÃ§Ã£o para construir os algoritmos.

*/