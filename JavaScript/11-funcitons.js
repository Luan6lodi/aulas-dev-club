// ğŸ“Œ FunÃ§Ãµes em JavaScript

// FunÃ§Ãµes sÃ£o blocos de cÃ³digo que podemos reutilizar.
// Elas servem para executar uma tarefa especÃ­fica, sempre que forem chamadas.
// Sintaxe bÃ¡sica:
// function nomeDaFuncao(parametros) { ... }

// -----------------------------
// ğŸ“Œ Exemplo 1: FunÃ§Ã£o simples
function saudacao() {
  console.log("OlÃ¡, bem-vindo ao estudo de funÃ§Ãµes!");
}

// Chamando a funÃ§Ã£o
saudacao(); // ğŸ‘‰ SaÃ­da: OlÃ¡, bem-vindo ao estudo de funÃ§Ãµes!


// -----------------------------
// ğŸ“Œ Exemplo 2: FunÃ§Ã£o com parÃ¢metros
function somar(a, b) {
  return a + b; // retorna a soma dos dois valores
}

console.log(somar(5, 7)); // ğŸ‘‰ SaÃ­da: 12
console.log(somar(10, 20)); // ğŸ‘‰ SaÃ­da: 30


// -----------------------------
// ğŸ“Œ Exemplo 3: FunÃ§Ã£o com valor padrÃ£o
function saudacaoNome(nome = "visitante") {
  console.log("OlÃ¡, " + nome + "!");
}

saudacaoNome("Luan"); // ğŸ‘‰ SaÃ­da: OlÃ¡, Luan!
saudacaoNome();       // ğŸ‘‰ SaÃ­da: OlÃ¡, visitante!


// -----------------------------
// ğŸ“Œ Exemplo 4: FunÃ§Ã£o anÃ´nima (armazenada em variÃ¡vel)
const multiplicar = function(x, y) {
  return x * y;
};

console.log(multiplicar(4, 5)); // ğŸ‘‰ SaÃ­da: 20


// -----------------------------
// ğŸ“Œ Exemplo 5: FunÃ§Ã£o de seta (Arrow Function)
const dividir = (x, y) => {
  return x / y;
};

console.log(dividir(20, 4)); // ğŸ‘‰ SaÃ­da: 5


// -----------------------------
// ğŸ“Œ Exemplo 6: Arrow Function simplificada
const quadrado = n => n * n;

console.log(quadrado(6)); // ğŸ‘‰ SaÃ­da: 36


// -----------------------------
// ğŸ“Œ Exemplo 7: FunÃ§Ãµes dentro de funÃ§Ãµes
function operacoes(a, b) {
  function soma(x, y) {
    return x + y;
  }
  function subtracao(x, y) {
    return x - y;
  }

  return "Soma: " + soma(a, b) + " | SubtraÃ§Ã£o: " + subtracao(a, b);
}

console.log(operacoes(10, 3)); // ğŸ‘‰ SaÃ­da: Soma: 13 | SubtraÃ§Ã£o: 7
